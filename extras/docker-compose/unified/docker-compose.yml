version: '3.2'
services:
    homeassistant:
        container_name: hass
        image: ghcr.io/home-assistant/home-assistant:stable
        labels:
          com.centurylinklabs.watchtower.monitor-only: "true"
        volumes:
          - /opt/homeassistant:/config
          - /opt/nginx-proxy-manager/database.sqlite:/tmp/database.sqlite
          - /var/run/docker.sock:/var/run/docker.sock
          - /home/aneisch/symlinks_for_rsync/hass-docker-ssh:/root/.ssh:ro
          - /tmp/radar.gif:/tmp/radar.gif
          - /sys/class/hwmon/hwmon1/temp1_input:/sys/class/thermal/thermal_zone0/temp:ro
          - /etc/localtime:/etc/localtime:ro
        devices:
            - /dev/zigbee
        environment:
          - TZ=America/Chicago
        healthcheck:
          test: 'curl -m 90 -sLf http://localhost:8123 || date >> /config/healthcheck' #| pkill -9 python3'
          interval: 90s
          timeout: 60s
          retries: 2
        network_mode: host
        restart: always
        logging:
          driver: none
    mariadb:
        container_name: mariadb
        image: 'mariadb:latest'
        user: '99'
        ports:
          - '127.0.0.1:3306:3306'
        volumes:
          - /opt/mariadb:/var/lib/mysql
        environment:
          - TZ=America/Chicago
          - MYSQL_ROOT_PASSWORD=PASSWORD
          - MYSQL_USER=homeassistant
          - MYSQL_PASSWORD=homeassistant
          - MYSQL_DATABASE=homeassistant
        restart: always
    mosquitto:
        container_name: mosquitto
        image: eclipse-mosquitto:latest
        user: '99'
        healthcheck:
            test: "mosquitto_sub -E -t '#'"
            interval: 60s
            timeout: 10s
            retries: 5
        volumes:
            - '/opt/mosquitto/config:/mosquitto/config:ro'
            - '/opt/mosquitto/log:/mosquitto/log'
            - '/opt/mosquitto/data:/mosquitto/data'
        ports:
            - '1883:1883'
        restart: always
    influxdb:
        container_name: influxdb
        #image: influxdb
        image: influxdb:1.8.4-alpine
        user: '99'
        #healthcheck:
        #  test: "curl -sf http://localhost:8086/ping"
        #  interval: 60s
        #  timeout: 10s
        #  retries: 5
        volumes:
            - '/opt/influxdb:/var/lib/influxdb'
            - '/opt/influxdb/conf:/etc/influxdb'
        ports:
            - '8086:8086'
        restart: always
    nodered:
        container_name: nodered
        image: nodered/node-red:latest
        user: '99'
        volumes:
          - /opt/nodered:/data
          - /etc/localtime:/etc/localtime:ro
        ports:
          - "1880:1880"
        environment:
          - TZ=America/Chicago
        restart: always
    appdaemon:
        container_name: appdaemon
        #image: acockburn/appdaemon:4.0.5
        image: acockburn/appdaemon:latest
        #user: '99'
        healthcheck:
          test: "curl -sf http://localhost:8888"
          interval: 60s
          timeout: 10s
          retries: 5
        volumes:
          - /etc/localtime:/etc/localtime:ro
          - /opt/appdaemon:/conf
          # Mount directory of appdaemon apps installed by HACS
          - /opt/homeassistant/appdaemon/apps:/conf/apps/hacs
          #- /home/aneisch/dockerStart.sh:/usr/src/app/dockerStart.sh:ro
        ports:
            - '8888:8888'
        restart: always
    #apcupsd_950:
    #    container_name: apcupsd_950
    #    image: gersilex/apcupsd
    #    ports:
    #        - '3551:3551'
    #    volumes:
    #        - /opt/apcupsd/apcupsd.conf:/etc/apcupsd/apcupsd.conf
    #    devices:
    #        - '/dev/ups_monitor_950:/dev/usb/hiddev0'
    #    restart: always
    #apcupsd_650:
    #    container_name: apcupsd_650
    #    image: gersilex/apcupsd
    #    ports:
    #        - '3552:3551'
    #    volumes:
    #        - /opt/apcupsd/apcupsd.conf:/etc/apcupsd/apcupsd.conf
    #    devices:
    #        - '/dev/ups_monitor_650:/dev/usb/hiddev0'
    #    restart: always
    thermostat_api_server:
        container_name: thermostat_api_server
        image: ghcr.io/aneisch/thermostat_api_server:latest
        volumes:
          - /etc/localtime:/etc/localtime:ro
        ports:
            - '8080:8080'
        environment:
            - THERMOSTAT_SERIAL=THERMOSTAT_SERIAL
            - MQTT_SERVER=10.0.1.22
        depends_on:
          - mosquitto
        restart: always
    zwavejs:
        container_name: zwavejs
        image: zwavejs/zwavejs2mqtt:latest
        #image: zwavejs/zwavejs2mqtt:sha-0a723f9 # 2.4.1
        restart: always
        #labels:
        #  com.centurylinklabs.watchtower.monitor-only: "true"
        stop_signal: SIGINT
        devices:
            - '/dev/zwave:/dev/zwave'
        volumes:
            - /opt/zwavejs:/usr/src/app/store
        ports:
            - '8091:8091' # port for web interface
            - '127.0.0.1:3000:3000' # port for zwave-js websocket server
    #zigbee2mqtt:
    #    container_name: zigbee2mqtt
    #    image: koenkk/zigbee2mqtt
    #    restart: unless-stopped
    #    ports:
    #        - '8880:8080'
    #    volumes:
    #        - /opt/zigbee2mqtt:/app/data
    #        - /run/udev:/run/udev:ro
    #    environment:
    #        - TZ=America/Chicago
    #    devices:
    #        - /dev/sonoff_zigbee:/dev/sonoff_zigbee
    gsm_message_relay:
        container_name: gsm_message_relay
        image: ghcr.io/aneisch/gsm_message_relay:latest
        #image: test
        ports:
            - '127.0.0.1:9999:9999'
        environment:
            # Optional GSM_MODEM - defaults to /dev/gsm_modem
            #- GSM_MODEM=/dev/gsm_modem
            # SIM key from Hologram Device dashboard
            - SIM_KEY=SIM_KEY
        devices:
            - /dev/gsm_modem:/dev/gsm_modem
        restart: always
    plex:
        container_name: plex
        image: plexinc/pms-docker:latest
        volumes:
            - '/opt/plex/db/:/config'
            - '/opt/plex/transcode/:/transcode'
            - '/plex/:/data'
        environment:
            - TZ=America/Chicago
            - PLEX_CLAIM=REDACT
            - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
            - TERM=xterm
            - LANG=C.UTF-8
            - LC_ALL=C.UTF-8
            - CHANGE_CONFIG_DIR_OWNERSHIP=true
            - HOME=/config
        network_mode: host
        restart: "no"
    portainer:
        container_name: portainer
        #image: portainer/portainer
        image: portainer/portainer-ce
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
            - '/opt/portainer:/data'
        #ports:
        #    - '9000:9000'
        environment:
            - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
        restart: "no"
    grafana:
        container_name: grafana
        #image: grafana/grafana:6.4.5
        image: grafana/grafana
        #user: '99'
        volumes:
            - /opt/grafana:/var/lib/grafana
        #ports:
        #    - '3000:3000'
        environment:
            - GF_SECURITY_ALLOW_EMBEDDING=true
            #- GF_SECURITY_COOKIE_SAMESITE=none
            - GF_INSTALL_PLUGINS=neocat-cal-heatmap-panel
        restart: "no"
    esphome:
        container_name: esphome
        # This is a custom build for now. Based on https://github.com/esphome/esphome/pull/671
        #image: esphome-dev
        #image: esphome/esphome:1.14.4
        image: esphome/esphome
        volumes:
            - /opt/esphome/:/config:rw
            # Use local time for logging timestamps
            #- /etc/localtime:/etc/localtime:ro
        network_mode: host
        restart: "no"
    433_mqtt:
        container_name: 433_mqtt
        image: ghcr.io/aneisch/rtl_433_mqtt:latest
        user: '99'
        labels:
          com.centurylinklabs.watchtower.enable: "false"
        restart: 'no'
        devices:
            - '/dev/bus/usb:/dev/bus/usb'
        volumes:
            # Config file for setting overrides
            #- '/opt/433_mqtt/433_mqtt_315mhz.conf:/etc/rtl_433/rtl_433.conf'
            - '/opt/433_mqtt/433_mqtt_916mhz.conf:/etc/rtl_433/rtl_433.conf'
    bitwarden:
        container_name: bitwarden
        image: vaultwarden/server:alpine
        user: '99'
        volumes:
            - /opt/bw-data/:/data/
            - /etc/localtime:/etc/localtime:ro
        environment:
            - DISABLE_ADMIN_TOKEN=true
            - SIGNUPS_VERIFY=true
            - SIGNUPS_ALLOWED=false
            - INVITATIONS_ALLOWED=true
            - LOG_FILE=/data/bitwarden.log
            - LOG_LEVEL=error
            - EXTENDED_LOGGING=true
            - DOMAIN=REDACT
            - SMTP_HOST=smtp.gmail.com
            - SMTP_FROM=REDACT
            - SMTP_FROM_NAME='Bitwarden Password Manager'
            - SMTP_SSL=true
            - SMTP_USERNAME=REDACT
            - SMTP_PASSWORD=REDACT
            - ROCKET_PORT=1024
            - WEBSOCKET_ENABLED=true
            - DUO_IKEY=
            - DUO_SKEY=
            - DUO_HOST=
        #ports:
        #    - '8777:1024'
        #    - '3012:3012'
        logging:
            driver: none
        restart: always
    bitwarden_backup:
        container_name: bitwarden_backup
        image: shivpatel/bitwarden_rs_dropbox_backup:latest
        # Has to run as root or something. Whatever.
        #user: '99'
        volumes:
            - /opt/bw-data:/data
            - /etc/localtime:/etc/localtime:ro
            - /opt/bw-backup/:/config
        environment:
            - BACKUP_ENCRYPTION_KEY=REDACT
            - DELETE_AFTER=15
        restart: always
    vscode:
        container_name: vscode
        image: linuxserver/code-server:3.12.0
        #ports:
        #  - '8443:8443'
        restart: always
        volumes:
          - '/opt/vscode:/config'
          - '/opt/homeassistant/:/ha_config/homeassistant'
          - '/opt/appdaemon/:/ha_config/appdaemon'
          - '/opt/docker-compose/:/ha_config/docker-compose'
          - '/opt/github:/ha_config/github_projects'
          - '/home/aneisch/.backup:/ha_config/homeassistant-git'
        environment:
          #- 'DOCKER_MODS=ghcr.io/stecky/mods:code-server-home-assistant'
          - 'DOCKER_MODS=ghcr.io/aneisch/code-server-home-assistant'
          - 'HOMEASSISTANT_URL=http://10.0.1.22:8123'
          - PUID=1000
          - PGID=1000
          - HOMEASSISTANT_TOKEN=XXX
    watchtower:
        container_name: watchtower
        image: containrrr/watchtower:latest
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /etc/localtime:/etc/localtime:ro
        #restart: always
        restart: 'no'
        environment:
          - WATCHTOWER_CLEANUP=true
          - WATCHTOWER_NO_STARTUP_MESSAGE=true
          - WATCHTOWER_NOTIFICATIONS_LEVEL=info
          - WATCHTOWER_INCLUDE_STOPPED=true
          - WATCHTOWER_NOTIFICATIONS=email
          - WATCHTOWER_NOTIFICATION_EMAIL_FROM=REDACT
          - WATCHTOWER_NOTIFICATION_EMAIL_TO=REDACT
          - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=smtp.gmail.com
          - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=587
          - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=REDACT
          - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=REDACT
          - WATCHTOWER_NOTIFICATION_EMAIL_DELAY=2
          - WATCHTOWER_NOTIFICATION_EMAIL_SUBJECTTAG=NUC
        #command: --schedule "00 00 12 * * *"
        command: --run-once
    adguard:
        container_name: adguard
        image: adguard/adguardhome:latest
        user: '99'
        #logging:
        #    driver: none
        volumes:
          - /etc/localtime:/etc/localtime:ro
          - /opt/adguard:/opt/adguardhome/conf
          - /opt/adguard/work:/opt/adguardhome/work
        ports:
          - 53:5353/tcp
          - 53:5353/udp
          - 8088:8080/tcp
        restart: 'always'
    librespeed:
        image: linuxserver/librespeed
        container_name: librespeed
        ports:
          - 8880:80
        environment:
          - PASSWORD=password
          - TZ=America/Chicago
        restart: 'no'
    recipes:
        # Public consumption at VPS, duplicated locally for home use though
        container_name: recipes
        image: ghcr.io/aneisch/chowdown:latest
        user: '99'
        #ports:
        #  - "4000:4000"
        volumes:
          - '/opt/recipes:/config'
          - '/etc/localtime:/etc/localtime:ro'
        restart: always
    #tuya-convert:
    #    # https://github.com/ct-Open-Source/tuya-convert
    #    # need to run with docker exec -it tuya-convert /bin/bash first, then issue "start" from bash
    #    # this is needed to accept EULA
    #    # then can use docker-compose exec tuya-convert start
    #    container_name: 'tuya-convert'
    #    image: tuya-convert:latest
    #    labels:
    #      com.centurylinklabs.watchtower.enable: "false"
    #    privileged: true
    #    network_mode: "host"
    #    environment:
    #      - WLAN=wlp58s0
    #      - AP=vtrust-flash
    #      - GATEWAY=10.42.42.1
    #    volumes:
    #      - /tmp/tuya:/usr/bin/tuya-convert/backups
    ring-mqtt:
        container_name: ring-mqtt
        #image: tsightler/ring-mqtt
        image: tsightler/ring-mqtt:5.0.2
        restart: 'always'
        user: '99'
        ports:
            - 8554:8554
        environment:
            - S6_READ_ONLY_ROOT=1
            - MQTTHOST=10.0.1.22
            # docker run -it --rm --entrypoint /app/ring-mqtt/node_modules/ring-client-api/ring-auth-cli.js tsightler/ring-mqtt
            - RINGTOKEN=TOKEN
            - ENABLEMODES=true
            - SNAPSHOTMODE=all
            - ENABLECAMERAS=true
        volumes:
            - '/opt/ring-mqtt:/data'
            #- type: tmpfs
            #  target: /run
    tailscale:
        container_name: tailscale
        volumes:
            - '/var/lib:/var/lib'
            - '/dev/net/tun:/dev/net/tun'
        network_mode: host
        privileged: true
        image: tailscale/tailscale
        entrypoint: tailscaled
    nginx-proxy-manager:
        container_name: nginx-proxy-manager
        image: jlesage/nginx-proxy-manager
        restart: 'always'
        environment:
            - USER_ID=99
            - GROUP_ID=99
        ports:
            #- "8181:8181"
            - "80:8080"
            - "443:4443"
        volumes:
            - "/opt/nginx-proxy-manager:/config:rw"
            - /etc/localtime:/etc/localtime:ro

    cloudflared:
        container_name: cloudflared
        image: cloudflare/cloudflared:2021.11.0
        restart: 'always'
        network_mode: host
        volumes:
            - /opt/cloudflared/:/home/nonroot/.cloudflared/
        command: tunnel run nuc
    github-runner:
        container_name: github-runner
        image: myoung34/github-runner:latest
        restart: 'always'
        environment:
          RUNNER_NAME: nuc-runner
          ACCESS_TOKEN: XXXX
          REPO_URL: https://github.com/aneisch/thermostat_api_server_docker
          RUNNER_WORKDIR: /tmp/runner/work
          LABELS: linux,x64,self-hosted
        security_opt:
          - label:disable
        volumes:
          - '/var/run/docker.sock:/var/run/docker.sock'
          - '/tmp/runner:/tmp/runner'
    signal-rest-api:
        container_name: signal-rest-api
        image: bbernhard/signal-cli-rest-api:latest
        restart: 'always'
        environment:
          - MODE=json-rpc
        ports:
          - "127.0.0.1:8800:8080" 
          #- "8800:8080" 
        volumes:
          - "/opt/signal-rest-api:/home/.local/share/signal-cli" 
    apcupsd:
        container_name: apcupsd
        image: gersilex/apcupsd
        ports:
            - '3551:3551'
        volumes:
            - /opt/apcupsd/apcupsd.conf:/etc/apcupsd/apcupsd.conf
        devices:
            - '/dev/ups_monitor_large:/dev/usb/hiddev0'
        restart: always
    secret:
        container_name: secret
        image: secret_container
        labels:
          com.centurylinklabs.watchtower.enable: "false"
        #ports: 
        #    - 9999:9999
        environment:
            - FTP_USERNAME=MyUser
            - FTP_PASSWORD=MyPAss
            - NOTIFICATIONS_WEBHOOK_URL="N/A"
            - WORKSHEET_NAME=2022
        volumes:
            - /opt/secret/secret.db:/output_files/secret.db
            - /opt/secret/input_files/:/input_files/
            - /opt/secret/secret.log:/var/log/secret.log
            # Place credential for Google Sheet API
            - /opt/secret/secret-container-update-sheet-38d0e5112f58.json:/home/secret/.config/gspread/service_account.json
        restart: always
